name: 'StyleCopAnalyzers'
description: 'StyleCop.Analyzers action to add NuGet packages and set up projects'
branding:
  icon: 'check-circle'
  color: 'purple'
runs:
  using: "composite"
  steps:
    - name: Set up StyleCopAnalyzers
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop";
        [string]$StyleCopAnalyzersPackageName = 'StyleCop.Analyzers'
        [string]$StyleCopAnalyzersPackagePath = $null

        # get the latest StyleCopAnalyzers package version
        $sapackages = Invoke-RestMethod -Uri "https://api-v2v3search-0.nuget.org/query?q=packageid:StyleCop.Analyzers&top=true"
        $StyleCopAnalyzersPackageVersion = ($sapackages.data.versions | Sort-Object  -Property version -Descending | Select-Object -First 1).version

        foreach ($projectFile in Get-ChildItem -Path . -Include *.csproj, *.vbproj -File -Recurse -Force) {

          $project = [xml](Get-Content -LiteralPath $projectFile.FullName -Raw)
          $propertyGroup = $project.CreateElement('PropertyGroup', $project.Project.NamespaceURI)

          # redirect all warnings to analysis.sarif file
          $errorLog = $project.CreateElement('ErrorLog', $project.Project.NamespaceURI)
          $errorLog.InnerText = 'analysis.sarif'
          $propertyGroup.AppendChild($errorLog) | Out-Null

          # add AdditionalFileItemNames to enable scanning of web.config
          # should we check if the AdditionalFileItemNames already exists?
          $additionalFileItemNames = $project.CreateElement("AdditionalFileItemNames", $project.Project.NamespaceURI)
          $additionalFileItemNames.InnerText = '$(AdditionalFileItemNames);Content'
          $propertyGroup.AppendChild($additionalFileItemNames) | Out-Null

          $project.Project.AppendChild($propertyGroup) | Out-Null
          $project.Save($projectFile.FullName)

          $packagesConfigFile = $projectFile.Directory.GetFileSystemInfos('packages.config')

          # if the project is new .NET Core style or the old one, but uses PackageReference
          if ($project.Project.Sdk -or ($project.Project.ItemGroup.PackageReference | Where-Object { $_ }) -or (-not $packagesConfigFile.Exists)) {
            # delete existing StyleCop.Analyzers PackageReference entities
            $project.Project.ItemGroup.PackageReference |
            Where-Object Include -like 'StyleCop.Analyzers*' |
            ForEach-Object { $_.SelectSingleNode('..').RemoveChild($_) | Out-Null }

            $packageReference = $project.CreateElement('PackageReference')
            $packageReferenceInclude = $project.CreateAttribute('Include')
            $packageReferenceInclude.Value = $StyleCopAnalyzersPackageName
            $packageReference.Attributes.Append($packageReferenceInclude) | Out-Null
            $packageReferenceVersion = $project.CreateAttribute('Version')
            $packageReferenceVersion.Value = $StyleCopAnalyzersPackageVersion
            $packageReference.Attributes.Append($packageReferenceVersion) | Out-Null
            $packageReferencePrivateAssets = $project.CreateAttribute('PrivateAssets')
            $packageReferencePrivateAssets.Value = 'All'
            $packageReference.Attributes.Append($packageReferencePrivateAssets) | Out-Null
            $packageReferenceIncludeAssets = $project.CreateAttribute('IncludeAssets')
            $packageReferenceIncludeAssets.Value = 'runtime; build; native; contentfiles; analyzers; buildtransitive'
            $packageReference.Attributes.Append($packageReferenceIncludeAssets) | Out-Null
            $itemGroup = $project.CreateElement('ItemGroup')
            $itemGroup.AppendChild($packageReference) | Out-Null
            $project.Project.AppendChild($itemGroup) | Out-Null

            # create RestoreProjectStyle element
            if (-not $project.Project.Sdk) {
              $restoreProjectStyle = $project.CreateElement('RestoreProjectStyle')
              $restoreProjectStyle.InnerText = 'PackageReference'
              $propertyGroup = $project.CreateElement('PropertyGroup')
              $propertyGroup.AppendChild($restoreProjectStyle) | Out-Null
              $project.Project.AppendChild($propertyGroup) | Out-Null
            }

            $project.Save($projectFile.FullName)
          }
          else { # Old style Full DotNet Framework project with packages.config

            # create or get the full path to the solution path directory
            if (-not $StyleCopAnalyzersPackagePath) {
              if (-not (Test-Path packages -PathType Container)) {
                $StyleCopAnalyzersPackagePath = (New-Item -Name packages -ItemType Directory).FullName
              }
              else {
                $StyleCopAnalyzersPackagePath = (Get-Item -Path packages).FullName
              }
            }

            # delete existing StyleCopAnalyzers analyzer entities
            $project.Project.ItemGroup.Analyzer |
            Where-Object Include -like '*StyleCop.Analyzers*' |
            ForEach-Object { $_.SelectSingleNode('..').RemoveChild($_) | Out-Null }

            # create RestoreProjectStyle element
            $restoreProjectStyle = $project.CreateElement('RestoreProjectStyle', $project.Project.NamespaceURI)
            $restoreProjectStyle.InnerText = 'PackagesConfig'
            $propertyGroup = $project.CreateElement('PropertyGroup', $project.Project.NamespaceURI)
            $propertyGroup.AppendChild($restoreProjectStyle) | Out-Null
            $project.Project.AppendChild($propertyGroup) | Out-Null

            # create Analyzer elements
            $itemGroup = $project.CreateElement('ItemGroup', $project.Project.NamespaceURI)

            $analyzer = $project.CreateElement('Analyzer', $project.Project.NamespaceURI)
            $analyzerInclude = $project.CreateAttribute('Include')
            # since the changes to the project will be discarded it is ok to set a Full path to StyleCopAnalyzersPackagePath
            $analyzerInclude.Value = Join-Path -Path $StyleCopAnalyzersPackagePath -ChildPath "$($StyleCopAnalyzersPackageName).$($StyleCopAnalyzersPackageVersion)\analyzers\dotnet\cs\StyleCop.Analyzers.dll"
            $analyzer.Attributes.Append($analyzerInclude) | Out-Null
            $itemGroup.AppendChild($analyzer) | Out-Null

            # Not sure if this is needed - will not be running any code fixes here!
            $analyzer = $project.CreateElement('Analyzer', $project.Project.NamespaceURI)
            $analyzerInclude = $project.CreateAttribute('Include')
            $analyzerInclude.Value = Join-Path -Path $StyleCopAnalyzersPackagePath -ChildPath "$($StyleCopAnalyzersPackageName).$($StyleCopAnalyzersPackageVersion)\analyzers\dotnet\cs\StyleCop.Analyzers.CodeFixes.dll"
            $analyzer.Attributes.Append($analyzerInclude) | Out-Null
            $itemGroup.AppendChild($analyzer) | Out-Null

            $project.Project.AppendChild($itemGroup) | Out-Null

            $project.Save($projectFile.FullName)

            $packagesConfig = [xml](Get-Content -LiteralPath $packagesConfigFile.FullName -Raw)

            # delete existing StyleCopAnalyzers package entities
            $packagesConfig.packages.package |
            Where-Object id -like '*StyleCop.Analyzers*' |
            ForEach-Object { $_.SelectSingleNode('..').RemoveChild($_) | Out-Null }

            # create a StyleCopAnalyzers package entity
            $package = $packagesConfig.CreateElement('package')
            $packageId = $packagesConfig.CreateAttribute('id')
            $packageId.Value = $StyleCopAnalyzersPackageName
            $package.Attributes.Append($packageId) | Out-Null
            $packageVersion = $packagesConfig.CreateAttribute('version')
            $packageVersion.Value = $StyleCopAnalyzersPackageVersion
            $package.Attributes.Append($packageVersion) | Out-Null
            $packageDevelopmentDependency = $packagesConfig.CreateAttribute('developmentDependency')
            $packageDevelopmentDependency.Value = 'true'
            $package.Attributes.Append($packageDevelopmentDependency) | Out-Null

            $packagesConfig.packages.AppendChild($package) | Out-Null

            $packagesConfig.Save($packagesConfigFile.FullName)
          }
        }
